
const extraProperties = require('../lib/extraProperties.js')
const https = require('https')
const path = require('path')
const webkitProperties = require('../lib/webkitProperties.js')
const { writeFile } = require('fs/promises')

const outputPath = path.resolve(__dirname, './../lib/supportedProperties.js')
const today = new Date().toISOString()
const url = 'https://drafts.csswg.org/cssom/#supported-css-property'
const allPropertiesUrl = 'https://www.w3.org/Style/CSS/all-properties.en.json'
const header = `
/**
 * autogenerated - ${today}
 *
 * ${url}
 *
 * ${allPropertiesUrl}
 * + lib/extraProperties
 * + lib/webkitProperties
 */
`

const request = https.request(allPropertiesUrl, response => {
    const { statusCode, statusMessage } = response
    if (statusCode !== 200) {
        if (statusCode < 400) {
            console.log(statusMessage)
        }
        if (statusCode > 400) {
            console.error(statusMessage)
            return
        }
    }
    let body = ''
    response.on('data', data => body += data)
    response.on('end', () => {
        const supportedProperties = JSON.stringify(
            JSON.parse(body)
                .reduce(
                    (all, { property }) => {
                        // Properties are often in multiple specifications with different status
                        if (!all.includes(property) && property !== '--*') {
                            all.push(property)
                        }
                        if (extraProperties.includes(property)) {
                            console.log(`The "${property}" property should be removed from extraProperties.`)
                        }
                        return all
                    },
                    [])
                .concat(extraProperties, webkitProperties)
                .sort(),
            null,
            2)
        const content = `${header}\nmodule.exports = new Set(${supportedProperties})\n`
        try {
            writeFile(outputPath, content)
        } catch (error) {
            console.error(error)
        }
    })
})
request.on('error', error => {
    throw error
})
request.end()
